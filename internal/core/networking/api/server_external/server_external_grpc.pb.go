// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server_external

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExternalServerServiceClient is the client API for ExternalServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExternalServerServiceClient interface {
	//Game process
	UpdateWorld(ctx context.Context, in *World, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	UpdateMap(ctx context.Context, in *Map, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	UpdatePC(ctx context.Context, in *PC, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	UpdateElement(ctx context.Context, in *Element, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	UpdateWeapon(ctx context.Context, in *Weapon, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	UpdateAmmo(ctx context.Context, in *Ammo, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	DeleteWorld(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// rpc DeletePC (google.protobuf.StringValue) returns (google.protobuf.BoolValue);
	GetWorld(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetWorldResponse, error)
	//Statistics
	GetStatistics(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetStatisticsResponse, error)
	//Archievements
	IsArchievementUnlocked(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	UnlockArchievement(ctx context.Context, in *UnlockArchievementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	//Utils
	AssignRandomSpawnsToPCs(ctx context.Context, in *AssignRandomSpawnsToPCsRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
}

type externalServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExternalServerServiceClient(cc grpc.ClientConnInterface) ExternalServerServiceClient {
	return &externalServerServiceClient{cc}
}

func (c *externalServerServiceClient) UpdateWorld(ctx context.Context, in *World, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ExternalServerService/UpdateWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerServiceClient) UpdateMap(ctx context.Context, in *Map, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ExternalServerService/UpdateMap", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerServiceClient) UpdatePC(ctx context.Context, in *PC, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ExternalServerService/UpdatePC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerServiceClient) UpdateElement(ctx context.Context, in *Element, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ExternalServerService/UpdateElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerServiceClient) UpdateWeapon(ctx context.Context, in *Weapon, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ExternalServerService/UpdateWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerServiceClient) UpdateAmmo(ctx context.Context, in *Ammo, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ExternalServerService/UpdateAmmo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerServiceClient) DeleteWorld(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ExternalServerService/DeleteWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerServiceClient) GetWorld(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetWorldResponse, error) {
	out := new(GetWorldResponse)
	err := c.cc.Invoke(ctx, "/ExternalServerService/GetWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerServiceClient) GetStatistics(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*GetStatisticsResponse, error) {
	out := new(GetStatisticsResponse)
	err := c.cc.Invoke(ctx, "/ExternalServerService/GetStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerServiceClient) IsArchievementUnlocked(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ExternalServerService/IsArchievementUnlocked", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerServiceClient) UnlockArchievement(ctx context.Context, in *UnlockArchievementRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ExternalServerService/UnlockArchievement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *externalServerServiceClient) AssignRandomSpawnsToPCs(ctx context.Context, in *AssignRandomSpawnsToPCsRequest, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/ExternalServerService/AssignRandomSpawnsToPCs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExternalServerServiceServer is the server API for ExternalServerService service.
// All implementations must embed UnimplementedExternalServerServiceServer
// for forward compatibility
type ExternalServerServiceServer interface {
	//Game process
	UpdateWorld(context.Context, *World) (*wrapperspb.BoolValue, error)
	UpdateMap(context.Context, *Map) (*wrapperspb.BoolValue, error)
	UpdatePC(context.Context, *PC) (*wrapperspb.BoolValue, error)
	UpdateElement(context.Context, *Element) (*wrapperspb.BoolValue, error)
	UpdateWeapon(context.Context, *Weapon) (*wrapperspb.BoolValue, error)
	UpdateAmmo(context.Context, *Ammo) (*wrapperspb.BoolValue, error)
	DeleteWorld(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	// rpc DeletePC (google.protobuf.StringValue) returns (google.protobuf.BoolValue);
	GetWorld(context.Context, *wrapperspb.StringValue) (*GetWorldResponse, error)
	//Statistics
	GetStatistics(context.Context, *wrapperspb.StringValue) (*GetStatisticsResponse, error)
	//Archievements
	IsArchievementUnlocked(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error)
	UnlockArchievement(context.Context, *UnlockArchievementRequest) (*emptypb.Empty, error)
	//Utils
	AssignRandomSpawnsToPCs(context.Context, *AssignRandomSpawnsToPCsRequest) (*wrapperspb.BoolValue, error)
	mustEmbedUnimplementedExternalServerServiceServer()
}

// UnimplementedExternalServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExternalServerServiceServer struct {
}

func (UnimplementedExternalServerServiceServer) UpdateWorld(context.Context, *World) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorld not implemented")
}
func (UnimplementedExternalServerServiceServer) UpdateMap(context.Context, *Map) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMap not implemented")
}
func (UnimplementedExternalServerServiceServer) UpdatePC(context.Context, *PC) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePC not implemented")
}
func (UnimplementedExternalServerServiceServer) UpdateElement(context.Context, *Element) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateElement not implemented")
}
func (UnimplementedExternalServerServiceServer) UpdateWeapon(context.Context, *Weapon) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWeapon not implemented")
}
func (UnimplementedExternalServerServiceServer) UpdateAmmo(context.Context, *Ammo) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAmmo not implemented")
}
func (UnimplementedExternalServerServiceServer) DeleteWorld(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorld not implemented")
}
func (UnimplementedExternalServerServiceServer) GetWorld(context.Context, *wrapperspb.StringValue) (*GetWorldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorld not implemented")
}
func (UnimplementedExternalServerServiceServer) GetStatistics(context.Context, *wrapperspb.StringValue) (*GetStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatistics not implemented")
}
func (UnimplementedExternalServerServiceServer) IsArchievementUnlocked(context.Context, *wrapperspb.StringValue) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsArchievementUnlocked not implemented")
}
func (UnimplementedExternalServerServiceServer) UnlockArchievement(context.Context, *UnlockArchievementRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlockArchievement not implemented")
}
func (UnimplementedExternalServerServiceServer) AssignRandomSpawnsToPCs(context.Context, *AssignRandomSpawnsToPCsRequest) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignRandomSpawnsToPCs not implemented")
}
func (UnimplementedExternalServerServiceServer) mustEmbedUnimplementedExternalServerServiceServer() {}

// UnsafeExternalServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExternalServerServiceServer will
// result in compilation errors.
type UnsafeExternalServerServiceServer interface {
	mustEmbedUnimplementedExternalServerServiceServer()
}

func RegisterExternalServerServiceServer(s grpc.ServiceRegistrar, srv ExternalServerServiceServer) {
	s.RegisterService(&ExternalServerService_ServiceDesc, srv)
}

func _ExternalServerService_UpdateWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(World)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).UpdateWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/UpdateWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).UpdateWorld(ctx, req.(*World))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServerService_UpdateMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Map)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).UpdateMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/UpdateMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).UpdateMap(ctx, req.(*Map))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServerService_UpdatePC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).UpdatePC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/UpdatePC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).UpdatePC(ctx, req.(*PC))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServerService_UpdateElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Element)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).UpdateElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/UpdateElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).UpdateElement(ctx, req.(*Element))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServerService_UpdateWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Weapon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).UpdateWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/UpdateWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).UpdateWeapon(ctx, req.(*Weapon))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServerService_UpdateAmmo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ammo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).UpdateAmmo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/UpdateAmmo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).UpdateAmmo(ctx, req.(*Ammo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServerService_DeleteWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).DeleteWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/DeleteWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).DeleteWorld(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServerService_GetWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).GetWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/GetWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).GetWorld(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServerService_GetStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).GetStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/GetStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).GetStatistics(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServerService_IsArchievementUnlocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).IsArchievementUnlocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/IsArchievementUnlocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).IsArchievementUnlocked(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServerService_UnlockArchievement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnlockArchievementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).UnlockArchievement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/UnlockArchievement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).UnlockArchievement(ctx, req.(*UnlockArchievementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExternalServerService_AssignRandomSpawnsToPCs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignRandomSpawnsToPCsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExternalServerServiceServer).AssignRandomSpawnsToPCs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ExternalServerService/AssignRandomSpawnsToPCs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExternalServerServiceServer).AssignRandomSpawnsToPCs(ctx, req.(*AssignRandomSpawnsToPCsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ExternalServerService_ServiceDesc is the grpc.ServiceDesc for ExternalServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExternalServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ExternalServerService",
	HandlerType: (*ExternalServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateWorld",
			Handler:    _ExternalServerService_UpdateWorld_Handler,
		},
		{
			MethodName: "UpdateMap",
			Handler:    _ExternalServerService_UpdateMap_Handler,
		},
		{
			MethodName: "UpdatePC",
			Handler:    _ExternalServerService_UpdatePC_Handler,
		},
		{
			MethodName: "UpdateElement",
			Handler:    _ExternalServerService_UpdateElement_Handler,
		},
		{
			MethodName: "UpdateWeapon",
			Handler:    _ExternalServerService_UpdateWeapon_Handler,
		},
		{
			MethodName: "UpdateAmmo",
			Handler:    _ExternalServerService_UpdateAmmo_Handler,
		},
		{
			MethodName: "DeleteWorld",
			Handler:    _ExternalServerService_DeleteWorld_Handler,
		},
		{
			MethodName: "GetWorld",
			Handler:    _ExternalServerService_GetWorld_Handler,
		},
		{
			MethodName: "GetStatistics",
			Handler:    _ExternalServerService_GetStatistics_Handler,
		},
		{
			MethodName: "IsArchievementUnlocked",
			Handler:    _ExternalServerService_IsArchievementUnlocked_Handler,
		},
		{
			MethodName: "UnlockArchievement",
			Handler:    _ExternalServerService_UnlockArchievement_Handler,
		},
		{
			MethodName: "AssignRandomSpawnsToPCs",
			Handler:    _ExternalServerService_AssignRandomSpawnsToPCs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server_external.proto",
}
