// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HideSeekClient is the client API for HideSeek service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HideSeekClient interface {
	AddWorld(ctx context.Context, in *World, opts ...grpc.CallOption) (*Status, error)
	AddPC(ctx context.Context, in *PC, opts ...grpc.CallOption) (*Status, error)
	AddElement(ctx context.Context, in *Element, opts ...grpc.CallOption) (*Status, error)
	AddWeapon(ctx context.Context, in *Weapon, opts ...grpc.CallOption) (*Status, error)
	AddAmmo(ctx context.Context, in *Ammo, opts ...grpc.CallOption) (*Status, error)
	UpdatePC(ctx context.Context, in *PC, opts ...grpc.CallOption) (*Status, error)
	UpdateAmmo(ctx context.Context, in *Ammo, opts ...grpc.CallOption) (*Status, error)
	GetWorld(ctx context.Context, in *GetWorldRequest, opts ...grpc.CallOption) (*World, error)
	ChooseSpawns(ctx context.Context, in *ChooseSpawnsRequest, opts ...grpc.CallOption) (*Status, error)
	RemoveWorld(ctx context.Context, in *RemoveWorldRequest, opts ...grpc.CallOption) (*Status, error)
	RemovePC(ctx context.Context, in *RemovePCRequest, opts ...grpc.CallOption) (*Status, error)
	GetWorldObjects(ctx context.Context, in *WorldObjectsRequest, opts ...grpc.CallOption) (*WorldObjectsResponse, error)
	SetGameStarted(ctx context.Context, in *SetGameStartedRequest, opts ...grpc.CallOption) (*Status, error)
	IsGameStarted(ctx context.Context, in *IsGameStartedRequest, opts ...grpc.CallOption) (*IsGameStartedResponse, error)
}

type hideSeekClient struct {
	cc grpc.ClientConnInterface
}

func NewHideSeekClient(cc grpc.ClientConnInterface) HideSeekClient {
	return &hideSeekClient{cc}
}

func (c *hideSeekClient) AddWorld(ctx context.Context, in *World, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/HideSeek/AddWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) AddPC(ctx context.Context, in *PC, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/HideSeek/AddPC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) AddElement(ctx context.Context, in *Element, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/HideSeek/AddElement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) AddWeapon(ctx context.Context, in *Weapon, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/HideSeek/AddWeapon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) AddAmmo(ctx context.Context, in *Ammo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/HideSeek/AddAmmo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) UpdatePC(ctx context.Context, in *PC, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/HideSeek/UpdatePC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) UpdateAmmo(ctx context.Context, in *Ammo, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/HideSeek/UpdateAmmo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) GetWorld(ctx context.Context, in *GetWorldRequest, opts ...grpc.CallOption) (*World, error) {
	out := new(World)
	err := c.cc.Invoke(ctx, "/HideSeek/GetWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) ChooseSpawns(ctx context.Context, in *ChooseSpawnsRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/HideSeek/ChooseSpawns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) RemoveWorld(ctx context.Context, in *RemoveWorldRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/HideSeek/RemoveWorld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) RemovePC(ctx context.Context, in *RemovePCRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/HideSeek/RemovePC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) GetWorldObjects(ctx context.Context, in *WorldObjectsRequest, opts ...grpc.CallOption) (*WorldObjectsResponse, error) {
	out := new(WorldObjectsResponse)
	err := c.cc.Invoke(ctx, "/HideSeek/GetWorldObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) SetGameStarted(ctx context.Context, in *SetGameStartedRequest, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/HideSeek/SetGameStarted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hideSeekClient) IsGameStarted(ctx context.Context, in *IsGameStartedRequest, opts ...grpc.CallOption) (*IsGameStartedResponse, error) {
	out := new(IsGameStartedResponse)
	err := c.cc.Invoke(ctx, "/HideSeek/IsGameStarted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HideSeekServer is the server API for HideSeek service.
// All implementations must embed UnimplementedHideSeekServer
// for forward compatibility
type HideSeekServer interface {
	AddWorld(context.Context, *World) (*Status, error)
	AddPC(context.Context, *PC) (*Status, error)
	AddElement(context.Context, *Element) (*Status, error)
	AddWeapon(context.Context, *Weapon) (*Status, error)
	AddAmmo(context.Context, *Ammo) (*Status, error)
	UpdatePC(context.Context, *PC) (*Status, error)
	UpdateAmmo(context.Context, *Ammo) (*Status, error)
	GetWorld(context.Context, *GetWorldRequest) (*World, error)
	ChooseSpawns(context.Context, *ChooseSpawnsRequest) (*Status, error)
	RemoveWorld(context.Context, *RemoveWorldRequest) (*Status, error)
	RemovePC(context.Context, *RemovePCRequest) (*Status, error)
	GetWorldObjects(context.Context, *WorldObjectsRequest) (*WorldObjectsResponse, error)
	SetGameStarted(context.Context, *SetGameStartedRequest) (*Status, error)
	IsGameStarted(context.Context, *IsGameStartedRequest) (*IsGameStartedResponse, error)
	mustEmbedUnimplementedHideSeekServer()
}

// UnimplementedHideSeekServer must be embedded to have forward compatible implementations.
type UnimplementedHideSeekServer struct {
}

func (UnimplementedHideSeekServer) AddWorld(context.Context, *World) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWorld not implemented")
}
func (UnimplementedHideSeekServer) AddPC(context.Context, *PC) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPC not implemented")
}
func (UnimplementedHideSeekServer) AddElement(context.Context, *Element) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddElement not implemented")
}
func (UnimplementedHideSeekServer) AddWeapon(context.Context, *Weapon) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWeapon not implemented")
}
func (UnimplementedHideSeekServer) AddAmmo(context.Context, *Ammo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAmmo not implemented")
}
func (UnimplementedHideSeekServer) UpdatePC(context.Context, *PC) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePC not implemented")
}
func (UnimplementedHideSeekServer) UpdateAmmo(context.Context, *Ammo) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAmmo not implemented")
}
func (UnimplementedHideSeekServer) GetWorld(context.Context, *GetWorldRequest) (*World, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorld not implemented")
}
func (UnimplementedHideSeekServer) ChooseSpawns(context.Context, *ChooseSpawnsRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChooseSpawns not implemented")
}
func (UnimplementedHideSeekServer) RemoveWorld(context.Context, *RemoveWorldRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWorld not implemented")
}
func (UnimplementedHideSeekServer) RemovePC(context.Context, *RemovePCRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePC not implemented")
}
func (UnimplementedHideSeekServer) GetWorldObjects(context.Context, *WorldObjectsRequest) (*WorldObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorldObjects not implemented")
}
func (UnimplementedHideSeekServer) SetGameStarted(context.Context, *SetGameStartedRequest) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetGameStarted not implemented")
}
func (UnimplementedHideSeekServer) IsGameStarted(context.Context, *IsGameStartedRequest) (*IsGameStartedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsGameStarted not implemented")
}
func (UnimplementedHideSeekServer) mustEmbedUnimplementedHideSeekServer() {}

// UnsafeHideSeekServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HideSeekServer will
// result in compilation errors.
type UnsafeHideSeekServer interface {
	mustEmbedUnimplementedHideSeekServer()
}

func RegisterHideSeekServer(s grpc.ServiceRegistrar, srv HideSeekServer) {
	s.RegisterService(&HideSeek_ServiceDesc, srv)
}

func _HideSeek_AddWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(World)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).AddWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/AddWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).AddWorld(ctx, req.(*World))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_AddPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).AddPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/AddPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).AddPC(ctx, req.(*PC))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_AddElement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Element)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).AddElement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/AddElement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).AddElement(ctx, req.(*Element))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_AddWeapon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Weapon)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).AddWeapon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/AddWeapon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).AddWeapon(ctx, req.(*Weapon))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_AddAmmo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ammo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).AddAmmo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/AddAmmo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).AddAmmo(ctx, req.(*Ammo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_UpdatePC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PC)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).UpdatePC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/UpdatePC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).UpdatePC(ctx, req.(*PC))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_UpdateAmmo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ammo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).UpdateAmmo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/UpdateAmmo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).UpdateAmmo(ctx, req.(*Ammo))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_GetWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).GetWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/GetWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).GetWorld(ctx, req.(*GetWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_ChooseSpawns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChooseSpawnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).ChooseSpawns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/ChooseSpawns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).ChooseSpawns(ctx, req.(*ChooseSpawnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_RemoveWorld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveWorldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).RemoveWorld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/RemoveWorld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).RemoveWorld(ctx, req.(*RemoveWorldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_RemovePC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).RemovePC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/RemovePC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).RemovePC(ctx, req.(*RemovePCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_GetWorldObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorldObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).GetWorldObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/GetWorldObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).GetWorldObjects(ctx, req.(*WorldObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_SetGameStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetGameStartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).SetGameStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/SetGameStarted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).SetGameStarted(ctx, req.(*SetGameStartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HideSeek_IsGameStarted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsGameStartedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HideSeekServer).IsGameStarted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/HideSeek/IsGameStarted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HideSeekServer).IsGameStarted(ctx, req.(*IsGameStartedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HideSeek_ServiceDesc is the grpc.ServiceDesc for HideSeek service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HideSeek_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "HideSeek",
	HandlerType: (*HideSeekServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddWorld",
			Handler:    _HideSeek_AddWorld_Handler,
		},
		{
			MethodName: "AddPC",
			Handler:    _HideSeek_AddPC_Handler,
		},
		{
			MethodName: "AddElement",
			Handler:    _HideSeek_AddElement_Handler,
		},
		{
			MethodName: "AddWeapon",
			Handler:    _HideSeek_AddWeapon_Handler,
		},
		{
			MethodName: "AddAmmo",
			Handler:    _HideSeek_AddAmmo_Handler,
		},
		{
			MethodName: "UpdatePC",
			Handler:    _HideSeek_UpdatePC_Handler,
		},
		{
			MethodName: "UpdateAmmo",
			Handler:    _HideSeek_UpdateAmmo_Handler,
		},
		{
			MethodName: "GetWorld",
			Handler:    _HideSeek_GetWorld_Handler,
		},
		{
			MethodName: "ChooseSpawns",
			Handler:    _HideSeek_ChooseSpawns_Handler,
		},
		{
			MethodName: "RemoveWorld",
			Handler:    _HideSeek_RemoveWorld_Handler,
		},
		{
			MethodName: "RemovePC",
			Handler:    _HideSeek_RemovePC_Handler,
		},
		{
			MethodName: "GetWorldObjects",
			Handler:    _HideSeek_GetWorldObjects_Handler,
		},
		{
			MethodName: "SetGameStarted",
			Handler:    _HideSeek_SetGameStarted_Handler,
		},
		{
			MethodName: "IsGameStarted",
			Handler:    _HideSeek_IsGameStarted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
